{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yehoshua\\\\Documents\\\\info\\\\Facultate\\\\Anul3\\\\Sem1\\\\IS\\\\Project\\\\MoneyManagementApp\\\\MoneyManagementApp_frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [message, setMessage] = useState(\"Default\");\n  /* aceasta comanda schimba starea obiectelor si de \n    fapt tot da reload la lucruri in pagina. Un fel de re-rendering.\n    'message' - variabila de stare, care contine valoarea curenta: initial e un string gol \"\".\n    'setMessage' - functia care modifica starea (actualizeaza valoarea lui message)\n    'useState('')' - seteaza valoarea initiala a starii (in cazul meu un string gol\"\")\n  */\n\n  useEffect(() => {\n    //trimite un request la url-ul meu ca sa ia textul de acolo sau ce e nevoie\n    fetch(\"http://localhost:8080/home\").then(response => response.text()) // așteaptă să se convertească în text\n    .then(my_text => setMessage(my_text)) // actualizează state-ul React\n    .catch(error => console.error(\"Eroare la fetch:\", error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: [\"Mesajul meu este: \", message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"EERlR9ZSj4qlyQDZfL7ACBWVAts=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","useEffect","useState","jsxDEV","_jsxDEV","App","_s","message","setMessage","fetch","then","response","text","my_text","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Yehoshua/Documents/info/Facultate/Anul3/Sem1/IS/Project/MoneyManagementApp/MoneyManagementApp_frontend/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport { useEffect, useState } from 'react';\n\nfunction App() {\n  const [message, setMessage] = useState(\"Default\");   \n  /* aceasta comanda schimba starea obiectelor si de \n    fapt tot da reload la lucruri in pagina. Un fel de re-rendering.\n    'message' - variabila de stare, care contine valoarea curenta: initial e un string gol \"\".\n    'setMessage' - functia care modifica starea (actualizeaza valoarea lui message)\n    'useState('')' - seteaza valoarea initiala a starii (in cazul meu un string gol\"\")\n  */\n\n  useEffect(() => {\n    //trimite un request la url-ul meu ca sa ia textul de acolo sau ce e nevoie\n     fetch(\"http://localhost:8080/home\")\n    .then(response => response.text())   // așteaptă să se convertească în text\n    .then(my_text => setMessage(my_text))  // actualizează state-ul React\n    .catch(error => console.error(\"Eroare la fetch:\", error));\n  },[])\n\n  return (\n    <h1>Mesajul meu este: {message}</h1>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,SAAS,CAAC;EACjD;AACF;AACA;AACA;AACA;AACA;;EAEED,SAAS,CAAC,MAAM;IACd;IACCQ,KAAK,CAAC,4BAA4B,CAAC,CACnCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAAG;IAAA,CACpCF,IAAI,CAACG,OAAO,IAAIL,UAAU,CAACK,OAAO,CAAC,CAAC,CAAE;IAAA,CACtCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC,CAAC;EAC3D,CAAC,EAAC,EAAE,CAAC;EAEL,oBACEX,OAAA;IAAAa,QAAA,GAAI,oBAAkB,EAACV,OAAO;EAAA;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAExC;AAACf,EAAA,CApBQD,GAAG;AAAAiB,EAAA,GAAHjB,GAAG;AAsBZ,eAAeA,GAAG;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}