{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Projects IS\\\\MoneyManagementApp\\\\MoneyManagementApp_frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [message, setMessage] = useState(\"Default\");\n  /* aceasta comanda schimba starea obiectelor si de \r\n    fapt tot da reload la lucruri in pagina. Un fel de re-rendering.\r\n    'message' - variabila de stare, care contine valoarea curenta: initial e un string gol \"\".\r\n    'setMessage' - functia care modifica starea (actualizeaza valoarea lui message)\r\n    'useState('')' - seteaza valoarea initiala a starii (in cazul meu un string gol\"\")\r\n  */\n\n  useEffect(() => {\n    //trimite un request la url-ul meu ca sa ia textul de acolo sau ce e nevoie\n    fetch(\"http://localhost:8080/books/1\", {\n      method: \"PUT\",\n      body: JSON.stringify({\n        \"title\": \"mama\",\n        \"author\": \"ion\"\n      })\n    }).then(response => response.text()) // așteaptă să se convertească în text\n    .then(my_text => setMessage(my_text)) // actualizează state-ul React\n    .catch(error => console.error(\"Eroare la fetch:\", error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: [\"Mesajul meu este: \", message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"EERlR9ZSj4qlyQDZfL7ACBWVAts=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","useEffect","useState","jsxDEV","_jsxDEV","App","_s","message","setMessage","fetch","method","body","JSON","stringify","then","response","text","my_text","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Projects/Projects IS/MoneyManagementApp/MoneyManagementApp_frontend/src/App.js"],"sourcesContent":["import logo from './logo.svg';\r\nimport './App.css';\r\nimport { useEffect, useState } from 'react';\r\n\r\nfunction App() {\r\n  const [message, setMessage] = useState(\"Default\");   \r\n  /* aceasta comanda schimba starea obiectelor si de \r\n    fapt tot da reload la lucruri in pagina. Un fel de re-rendering.\r\n    'message' - variabila de stare, care contine valoarea curenta: initial e un string gol \"\".\r\n    'setMessage' - functia care modifica starea (actualizeaza valoarea lui message)\r\n    'useState('')' - seteaza valoarea initiala a starii (in cazul meu un string gol\"\")\r\n  */\r\n\r\n  useEffect(() => {\r\n    //trimite un request la url-ul meu ca sa ia textul de acolo sau ce e nevoie\r\n     fetch(\"http://localhost:8080/books/1\",{\r\n      method: \"PUT\",\r\n      body: JSON.stringify({\"title\":\"mama\",\"author\":\"ion\"})\r\n     })\r\n    .then(response => response.text())   // așteaptă să se convertească în text\r\n    .then(my_text => setMessage(my_text))  // actualizează state-ul React\r\n    .catch(error => console.error(\"Eroare la fetch:\", error));\r\n  },[])\r\n\r\n  return (\r\n    <h1>Mesajul meu este: {message}</h1>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,SAAS,CAAC;EACjD;AACF;AACA;AACA;AACA;AACA;;EAEED,SAAS,CAAC,MAAM;IACd;IACCQ,KAAK,CAAC,+BAA+B,EAAC;MACrCC,MAAM,EAAE,KAAK;MACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAC,OAAO,EAAC,MAAM;QAAC,QAAQ,EAAC;MAAK,CAAC;IACrD,CAAC,CAAC,CACFC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAAG;IAAA,CACpCF,IAAI,CAACG,OAAO,IAAIT,UAAU,CAACS,OAAO,CAAC,CAAC,CAAE;IAAA,CACtCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC,CAAC;EAC3D,CAAC,EAAC,EAAE,CAAC;EAEL,oBACEf,OAAA;IAAAiB,QAAA,GAAI,oBAAkB,EAACd,OAAO;EAAA;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAExC;AAACnB,EAAA,CAvBQD,GAAG;AAAAqB,EAAA,GAAHrB,GAAG;AAyBZ,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}