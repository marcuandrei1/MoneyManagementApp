{"ast":null,"code":"var _jsxFileName = \"D:\\\\Facultate\\\\Anul 3 CTI\\\\Semestrul 1\\\\Inginerie Software_IS\\\\Laborator\\\\Proiect_Money_Management_App\\\\MoneyManagementApp_frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [message, setMessage] = useState(\"Default\");\n  /* aceasta comanda schimba starea obiectelor si de \n    fapt tot da reload la lucruri in pagina. Un fel de re-rendering.\n    'message' - variabila de stare, care contine valoarea curenta: initial e un string gol \"\".\n    'setMessage' - functia care modifica starea (actualizeaza valoarea lui message)\n    'useState('')' - seteaza valoarea initiala a starii (in cazul meu un string gol\"\")\n  */\n\n  useEffect(async () => {\n    //trimite un request la url-ul meu ca sa ia textul de acolo sau ce e nevoie\n    const response = await fetch(\"http://localhost:8080/home\");\n    const my_text = await response.text();\n    setMessage(my_text);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Butonul_de_test\",\n        onClick: handleClick,\n        children: \"Apasa-ma\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" Mesajul meu este: \", message, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"EERlR9ZSj4qlyQDZfL7ACBWVAts=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","useEffect","useState","jsxDEV","_jsxDEV","App","_s","message","setMessage","response","fetch","my_text","text","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","handleClick","_c","$RefreshReg$"],"sources":["D:/Facultate/Anul 3 CTI/Semestrul 1/Inginerie Software_IS/Laborator/Proiect_Money_Management_App/MoneyManagementApp_frontend/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport { useEffect, useState } from 'react';\n\nfunction App() {\n  const [message, setMessage] = useState(\"Default\");   \n  /* aceasta comanda schimba starea obiectelor si de \n    fapt tot da reload la lucruri in pagina. Un fel de re-rendering.\n    'message' - variabila de stare, care contine valoarea curenta: initial e un string gol \"\".\n    'setMessage' - functia care modifica starea (actualizeaza valoarea lui message)\n    'useState('')' - seteaza valoarea initiala a starii (in cazul meu un string gol\"\")\n  */\n\n  useEffect(async () => {\n    //trimite un request la url-ul meu ca sa ia textul de acolo sau ce e nevoie\n    const response = await fetch(\"http://localhost:8080/home\");\n      const my_text = await response.text();\n      setMessage(my_text);\n  },[])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <button className=\"Butonul_de_test\" onClick={handleClick}>Apasa-ma</button>\n        <h1> Mesajul meu este: {message} </h1>\n      </header>\n\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,SAAS,CAAC;EACjD;AACF;AACA;AACA;AACA;AACA;;EAEED,SAAS,CAAC,YAAY;IACpB;IACA,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,CAAC;IACxD,MAAMC,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACrCJ,UAAU,CAACG,OAAO,CAAC;EACvB,CAAC,EAAC,EAAE,CAAC;EAEL,oBACEP,OAAA;IAAKS,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBV,OAAA;MAAQS,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC5BV,OAAA;QAAKW,GAAG,EAAEf,IAAK;QAACa,SAAS,EAAC,UAAU;QAACG,GAAG,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAClDhB,OAAA;QAAQS,SAAS,EAAC,iBAAiB;QAACQ,OAAO,EAAEC,WAAY;QAAAR,QAAA,EAAC;MAAQ;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC3EhB,OAAA;QAAAU,QAAA,GAAI,qBAAmB,EAACP,OAAO,EAAC,GAAC;MAAA;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGN,CAAC;AAEV;AAACd,EAAA,CA3BQD,GAAG;AAAAkB,EAAA,GAAHlB,GAAG;AA6BZ,eAAeA,GAAG;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}